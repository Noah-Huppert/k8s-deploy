#/usr/bin/env bash
# vim: filetype=sh
#
# USAGE
#	k8s-deploy [--docker-repo DOCKER_REPO] [--deploy-dir DEPLOY_DIR] [--rm-deploy]
#
# OPTIONS
#	--docker-repo DOCKER_REPO    Name of docker repository to push docker
#                                image to
#
#	--deploy-dir DEPLOY_DIR      Directory which holds Helm packages. Each
#                                directory in the DEPLOY_DIR must be a
#                                Helm package.
#
#	--rm-deploy                  Remove deployment from cluster
#
# BEHAVIOR
#	If the --docker-repo option is provided:
#		Builds and pushes docker image to specified DOCKER_REPO.
#
#	If the --deploy-dir option is provided: 
#		Expects each sub-directory in the DEPLOY_DIR to be a Helm chart. Builds 
#		and deploys each Helm chart.
#
#		If a sub-directory in the DEPLOY_DIR is not a Helm chart tell the tool 
#		to ignore this directory by placing a file named K8S_DEPLOY_IGNORE.
#
#		If the DEPLOYMENT_NAME file is present in a Helm chart directory the
#		contents of this file will be used as the Helm chart deployment name.
#		If this file is not present the path to the Helm chart directory will 
#		be used as the deployment name.
#
#		If the NAMESPACE_NAME file is present in a Helm chart directory the 
#		namespace the Helm chart will be deployed will be the contents of this
#		file. If the file is not present the name of the deployment will be 
#		used as the namespace.
#
#		If the DEPLOY_ARGS file is present in a Helm chart directory the
#		arguments present in this file will be passed to helm when the chart
#		is deployed. These deployment arguments should be written with Helm 
#		chart directory as the current working directory.

# Check for k8s-deploy update if installed via submodule
function is_submodule() {
	(cd "$(dirname $0)" &&
		cd "$(git rev-parse --show-toplevel)/.." &&
		git rev-parse --is-inside-work-tree) | grep -q true
}

if is_submodule; then
	# Get latest commit sha from remote
	remote_sha=$(cd "$(dirname $0)" && git ls-remote origin HEAD | awk '{ print $1 }')

	if [[ "$?" != "0" ]]; then
		echo "Error: failed to get latest git commit from remote" >&2
		exit 1
	fi

	# Get local commit sha
	local_sha=$(cd "$(dirname $0)" && git rev-parse HEAD)

	if [[ "$?" != "0" ]]; then
		echo "Error: failed to get latest git commit locally" >&2
		exit 1
	fi

	# Check if we have the latest version
	if [[ "$local_sha" != "$remote_sha" ]]; then
		echo "An update is available. Update by running:"
		echo "    Current version: $local_sha"
		echo "    New version    : $remote_sha"
		echo
		echo "    git submodule update --remote"

		exit 1
	else
		echo "k8s-deploy tool is up to date"
	fi
fi

# Arguments
while [ ! -z "$1" ]; do
	if [[ "$1" == "--docker-repo" ]]; then
		shift
		docker_repo="$1"
		shift

		if [ -z "$docker_repo" ]; then
			echo "Error: DOCKER_REPO argument must be provided" >&2
			exit 1
		fi
	elif [[ "$1" == "--deploy-dir" ]]; then
		shift
		deploy_dir="$1"
		shift

		if [ -z "$deploy_dir" ]; then
			echo "Error: DEPLOY_DIR argument must be provided" >&2
			exit 1
		fi
	elif [[ "$1" == "--rm-deploy" ]]; then
		shift
		rm_deploy="true"
	else
		echo "Error: unknown option \"$1\"" >&2
		exit 1
	fi
done

echo "Configuration"
echo "    Docker repo: $docker_repo"
echo "    Deploy dir : $deploy_dir"
echo "    RM deploy  : $rm_deploy"

# Perform docker deploy actions if --docker-repo option provided
if [ ! -z "$docker_repo" ]; then
	echo "##########################"
	echo "# Deploying Docker image #"
	echo "##########################"

	# Build docker image tag
	version=$(git rev-parse --verify HEAD)
	if [[ "$?" != "0" ]]; then
		echo "Error: failed to get git head sha" >&2
		exit 1
	fi

	docker_tag="$docker_repo:$version"

	echo "Docker tag: $docker_tag"

	# Build docker image
	echo "===== Building Docker image"

	if ! docker build -t "$docker_tag" .; then
		echo "Error: failed to build docker image" >&2
		exit 1
	fi

	# Push docker image
	echo "===== Pushing Docker image"
	if ! docker push "$docker_tag"; then
		echo "Error: failed to push docker image" >&2
		exit 1
	fi

	# Set argument so that helm deploy will use correct docker tag
	set_args="--set image.tag=$version"
fi

# Perform helm deploy actions if --deploy-dir option provided
if [ ! -z "$deploy_dir" ]; then
	echo "#########################"
	echo "# Deploying Helm charts #"
	echo "#########################"

	# Helm packages
	for pkg in $(find "$deploy_dir" -mindepth 1 -maxdepth 1 -type d); do
		pkg_dir="$(pwd)/$pkg"

		# Check if K8S_DEPLOY_IGNORE file is present
		if [ -f "$pkg_dir/K8S_DEPLOY_IGNORE" ]; then
			echo "===== Ignoring directory: \"$pkg_dir\""
			continue
		fi

		# Get deployment name
		deployment_name="$pkg"
		if [ -f "$pkg_dir/DEPLOYMENT_NAME" ]; then
			deployment_name=$(cat "$pkg_dir/DEPLOYMENT_NAME")
		fi

		# Get namespace name
		namespace_name="$deployment_name"
		if [ -f "$pkg_dir/NAMESPACE_NAME" ]; then
			namespace_name=$(cat "$pkg_dir/NAMESPACE_NAME")
		fi

		# Get deploy arguments
		deploy_args=""
		if [ -f "$pkg_dir/DEPLOY_ARGS" ]; then
			deploy_args=$(cat "$pkg_dir/DEPLOY_ARGS")
		fi

		echo "    Helm chart      : $pkg"
		echo "    Helm chart path : $pkg_dir"
		echo "    Deployment name : $deployment_name"
		echo "    Namespace name  : $namespace_name"
		echo "    Deploy arguments: $deploy_args"


		if [[ "$rm_deploy" == "true" ]]; then
			# Undeploy
			echo "===== Removing Helm chart deployment"
			if ! helm delete --purge "$deployment_name"; then
				echo "Error: failed to removing Helm chart deployment" >&2
				exit 1
			fi
		else
			# Package
			echo "===== Building Helm chart"
			(cd "$pkg_dir" && helm package .)

			if [[ "$?" != "0" ]]; then
				echo "Error: failed to build helm package" >&2
				exit 1
			fi
		
			# Deploy
			echo "===== Deploying Helm chart"
			(cd "$pkg_dir" && 
				helm upgrade --install \
					--namespace "$namespace_name" \
					$set_args \
					$deploy_args \
					"$deployment_name" \
					.)

			if [[ "$?" != "0" ]]; then
				echo "Error: failed to deploy helm package" >&2
				exit 1
			fi
		fi
	done
fi
