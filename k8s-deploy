#/usr/bin/env bash
# vim: filetype=sh
#
# USAGE
#	k8s-deploy STAGES...
#
# ARGUMENTS
#	1. STAGES    Names of the deploy stages to run. Valid stage values are:
#
#	                 - up: Runs the docker and deploy stages
#                    - docker: Builds and pushes a Docker image
#                    - deploy: Packages and deploys Helm charts
#                    - rm-deploy: Remove all deployed Helm charts from cluster
#
#			     Note that the deploy and rm-deploy stages can not be specified
#				 at the same time.
#
# CONFIGURATION
#	Configuration options should be stored in the .k8s-deploy file. It should be
#	located in the directory which you invoke the k8s-deploy tool.
#
#	The .k8s-deploy configuration file will be sourced when the k8s-deploy tool
#	runs.
#
#	The following environment variables should be exported:
#
#	DOCKER_REPO    Name of docker repository to push docker image to
#
#	DEPLOY_DIR     Directory which holds Helm packages. Each directory in the
#                  DEPLOY_DIR must be a Helm package.
#
#	If a .k8s-deploy configuration file does not exist, it is expected that the 
#	above environment variables exist in the environment via some other method.
#
# BEHAVIOR
#	If the docker stage is provided:
#		Builds and pushes docker image to specified DOCKER_REPO.
#
#	If the deploy stage is provided: 
#		Expects each sub-directory in the DEPLOY_DIR to be a Helm chart. Builds 
#		and deploys each Helm chart.
#
#		If a sub-directory in the DEPLOY_DIR is not a Helm chart tell the tool 
#		to ignore this directory by placing a file named K8S_DEPLOY_IGNORE.
#
#		If the DEPLOYMENT_NAME file is present in a Helm chart directory the
#		contents of this file will be used as the Helm chart deployment name.
#		If this file is not present the path to the Helm chart directory will 
#		be used as the deployment name.
#
#		If the NAMESPACE_NAME file is present in a Helm chart directory the 
#		namespace the Helm chart will be deployed will be the contents of this
#		file. If the file is not present the name of the deployment will be 
#		used as the namespace.
#
#		If the DEPLOY_ARGS file is present in a Helm chart directory the
#		arguments present in this file will be passed to helm when the chart
#		is deployed. These deployment arguments should be written with Helm 
#		chart directory as the current working directory.
#
#	If the rm-deplot stage is provided:
#		Traverses the DEPLOY_DIR in the same way the deploy stage would. However
#		instead of deploying each Helm chart it comes across it removes each
#		Helm chart it comes across

# Check for k8s-deploy update if installed via submodule
function is_submodule() {
	(cd "$(dirname $0)" &&
		cd "$(git rev-parse --show-toplevel)/.." &&
		git rev-parse --is-inside-work-tree) | grep -q true
}

if is_submodule; then
	# Get latest commit sha from remote
	remote_sha=$(cd "$(dirname $0)" && git ls-remote origin HEAD | awk '{ print $1 }')

	if [[ "$?" != "0" ]]; then
		echo "Error: failed to get latest git commit from remote" >&2
		exit 1
	fi

	# Get local commit sha
	local_sha=$(cd "$(dirname $0)" && git rev-parse HEAD)

	if [[ "$?" != "0" ]]; then
		echo "Error: failed to get latest git commit locally" >&2
		exit 1
	fi

	# Check if we have the latest version
	if [[ "$local_sha" != "$remote_sha" ]]; then
		echo "An update is available"
		echo "    Current version: $local_sha"
		echo "    New version    : $remote_sha"
		echo
		echo "Update by running:"
		echo
		echo "    git submodule update --remote"

		exit 1
	else
		echo "k8s-deploy tool is up to date"
	fi
fi

# Load configuration
if [ -f ".k8s-deploy" ]; then
	. ./.k8s-deploy
fi

# Arguments
stage_docker="false"
stage_deploy="false"
stage_rm_deploy="false"

while [ ! -z "$1" ]; do
	if [[ "$1" == "up" ]]; then
		stage_docker="true"
		stage_deploy="true"

	elif [[ "$1" == "docker" ]]; then
		stage_docker="true"

	elif [[ "$1" == "deploy" ]]; then
		stage_deploy="true"

	elif [[ "$1" == "rm-deploy" ]]; then
		stage_rm_deploy="true"
	else
		echo "Error: unknown stage \"$1\"" >&2
		exit 1
	fi

	shift
done

# Check that deploy and rm-deploy stages aren't specified at same time
if [[ "$stage_deploy" == "true" && "stage_rm_deploy" == "true" ]]; then
	echo "Error: deploy and rm-deploy stages can not be specified at the same time" >&2
	exit 1
fi

echo "Configuration"
echo "    Docker repo: $DOCKER_REPO"
echo "    Deploy dir : $DEPLOY_DIR"
echo
echo "Stages"
echo "    Docker       : $stage_docker"
echo "    Deploy       : $stage_deploy"
echo "    Remove deploy: $stage_rm_deploy"

# Get latest git commit to use as application version
version=$(git rev-parse --verify HEAD)
if [[ "$?" != "0" ]]; then
	echo "Error: failed to get git head sha" >&2
	exit 1
fi

# Perform docker deploy
if [[ "$stage_docker" == "true" ]]; then
	echo "##########################"
	echo "# Deploying Docker image #"
	echo "##########################"

	# Check required configuration variables are set
	if [ -z "$DOCKER_REPO" ]; then
		echo "Error: docker stage requires the DOCKER_REPO environment variable to be set" >&2
		exit 1
	fi

	# Build docker image tag
	docker_tag="$DOCKER_REPO:$version"

	echo "Docker tag: $docker_tag"

	# Build docker image
	echo "===== Building Docker image"

	if ! docker build -t "$docker_tag" .; then
		echo "Error: failed to build docker image" >&2
		exit 1
	fi

	# Push docker image
	echo "===== Pushing Docker image"
	if ! docker push "$docker_tag"; then
		echo "Error: failed to push docker image" >&2
		exit 1
	fi
fi

# Perform helm deploy actions
if [[ "$stage_deploy" == "true" || "$stage_rm_deploy" == "true" ]]; then
	echo "#########################"
	echo "# Deploying Helm charts #"
	echo "#########################"

	# Check required configuration variables are set
	if [ -z "$DEPLOY_DIR" ]; then
		echo "Error: deploy / rm-deploy stage requires the DEPLOY_DIR environment variable to be set" >&2
		exit 1
	fi

	# Set argument so that helm deploy will use correct docker tag
	set_args="--set image.tag=$version"

	# Helm packages
	for pkg in $(find "$DEPLOY_DIR" -mindepth 1 -maxdepth 1 -type d); do
		pkg_dir="$(pwd)/$pkg"

		# Check if K8S_DEPLOY_IGNORE file is present
		if [ -f "$pkg_dir/K8S_DEPLOY_IGNORE" ]; then
			echo "===== Ignoring directory: \"$pkg_dir\""
			continue
		fi

		# Get deployment name
		deployment_name="$pkg"
		if [ -f "$pkg_dir/DEPLOYMENT_NAME" ]; then
			deployment_name=$(cat "$pkg_dir/DEPLOYMENT_NAME")
		fi

		# Get namespace name
		namespace_name="$deployment_name"
		if [ -f "$pkg_dir/NAMESPACE_NAME" ]; then
			namespace_name=$(cat "$pkg_dir/NAMESPACE_NAME")
		fi

		# Get deploy arguments
		deploy_args=""
		if [ -f "$pkg_dir/DEPLOY_ARGS" ]; then
			deploy_args=$(cat "$pkg_dir/DEPLOY_ARGS")
		fi

		echo "    Helm chart      : $pkg"
		echo "    Helm chart path : $pkg_dir"
		echo "    Deployment name : $deployment_name"
		echo "    Namespace name  : $namespace_name"
		echo "    Deploy arguments: $deploy_args"


		if [[ "$stage_rm_deploy" == "true" ]]; then
			# Undeploy
			echo "===== Removing Helm chart deployment"
			if ! helm delete --purge "$deployment_name"; then
				echo "Error: failed to removing Helm chart deployment" >&2
				exit 1
			fi
		else
			# Package
			echo "===== Building Helm chart"
			(cd "$pkg_dir" && helm package .)

			if [[ "$?" != "0" ]]; then
				echo "Error: failed to build helm package" >&2
				exit 1
			fi
		
			# Deploy
			echo "===== Deploying Helm chart"
			(cd "$pkg_dir" && 
				helm upgrade --install \
					--namespace "$namespace_name" \
					$set_args \
					$(eval echo $deploy_args) \
					"$deployment_name" \
					.)

			if [[ "$?" != "0" ]]; then
				echo "Error: failed to deploy helm package" >&2
				exit 1
			fi
		fi
	done
fi
